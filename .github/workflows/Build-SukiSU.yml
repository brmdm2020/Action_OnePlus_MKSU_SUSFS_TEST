name: Build OnePlus_Kernel (Optimized)
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支 (e.g., sm8650, sm8475)"
        required: true
        default: 'sm8475' # Defaulting to the problematic one for testing
      FEIL:
        description: "配置文件 (e.g., oneplus_ace3_pro_v, oneplus_ace2_v)"
        required: true
        default: 'oneplus_ace2_v' # Defaulting to the problematic one for testing
      CPUD:
        description: "处理器代号 (e.g., pineapple, waipio)"
        required: true
        default: 'waipio' # Defaulting to the problematic one for testing
      ANDROID_VERSION:
        description: "内核安卓版本 (e.g., android14, android12)"
        required: true
        default: 'android12' # Defaulting to the problematic one for testing
      KERNEL_VERSION:
        description: "内核版本 (e.g., 6.1, 5.10)"
        required: true
        default: '5.10' # Defaulting to the problematic one for testing
      KERNEL_NAME:
        description: "修改内核名称 (e.g., -android14-11-o-g1132d864665d, -android12-9-o-brmdm)"
        required: true
        default: '-android12-9-o-brmdm' # Defaulting to the problematic one for testing
      kernelsu_variant:
        description: "选择 KSU (SukiSU is based on KernelSU)"
        required: true
        type: choice
        options:
          # - Kernel # Keeping SukiSU as it seems the focus
          - SukiSU
        default: SukiSU
      kernelsu_version:
        description: "选择 KSU 版本 (For SukiSU setup script)"
        required: true
        type: choice
        options:
          - without ksu # This option might conflict with SukiSU choice? Review needed.
          - tag         # Corresponds to '-' branch arg
          - main        # Corresponds to '-s susfs-dev' branch arg
        default: main
      SUSFS_ENABLED:
        description: "添加 SUSFS"
        required: true
        type: boolean
        default: true
      VFS_patch_ENABLED:
        description: "添加 vfs 补丁（新钩子）？"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 8192 # Increased temp space
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git
        run: |
         git config --global user.name "ychenxuan" # Or a generic builder name
         git config --global user.email "3494167979@qq.com" # Or a generic builder email

      - name: Install dependencies
        run: |
         sudo apt-get update && sudo apt-get upgrade -y
         # Combined dependencies from original and reference
         sudo apt-get install -y --no-install-recommends \
           python3 git curl patch bc bison flex libssl-dev cpio \
           libelf-dev libncurses5-dev gcc make clang lld llvm libc6-dev
         # Add any other specific dependencies if known

      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync kernel source
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         echo "Initializing repo for branch: oneplus/${{ inputs.CPU }}, manifest: ${{ inputs.FEIL }}.xml"
         repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ inputs.CPU }} -m ${{ inputs.FEIL }}.xml --depth=1
         echo "Syncing repository..."
         repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune -j$(nproc --all) || { echo "Repo sync failed"; exit 1; }
         echo "Removing ABI GKI protected exports..."
         rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
         rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
         # Note: The -dirty removal is handled in the next step more reliably

      - name: Force remove -dirty suffix from version string
        run: |
          cd kernel_workspace/kernel_platform
          echo "Applying sed to remove -dirty suffix..."
          sed -i 's/ -dirty//g' common/scripts/setlocalversion || echo "sed failed on common/setlocalversion"
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion || echo "sed failed on msm-kernel/setlocalversion"
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion || echo "sed failed on external/dtc/setlocalversion"
          # Add the line from reference workflow to ensure removal even if other parts fail
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion || echo "sed injection failed on common/setlocalversion"
          echo "Committing the changes..."
          git add -A
          git commit -m "Build: Force remove -dirty suffix from kernel version" --allow-empty

      - name: Determine SukiSU Branch Argument
        # This step prepares the argument for the SukiSU setup script based on user input
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && inputs.kernelsu_version != 'without ksu' }}
        run: |
          if [[ "${{ inputs.kernelsu_version }}" == "tag" ]]; then
            echo "SUKI_BRANCH_ARG=-" >> $GITHUB_ENV
          elif [[ "${{ inputs.kernelsu_version }}" == "main" ]]; then
            # Note: Original workflow used '-s susfs-dev', ensure this is correct for SukiSU setup
            echo "SUKI_BRANCH_ARG=-s susfs-dev" >> $GITHUB_ENV
          else
            echo "SUKI_BRANCH_ARG=" >> $GITHUB_ENV # Default or handle other cases
          fi
          echo "SukiSU Branch Argument set to: ${{ env.SUKI_BRANCH_ARG }}"

      - name: Add KernelSU-SukiSU
        # Only run if SukiSU is selected and not 'without ksu'
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && inputs.kernelsu_version != 'without ksu' }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "Setting up SukiSU using branch argument: ${{ env.SUKI_BRANCH_ARG }}"
          # Ensure the setup script URL and arguments are correct for the desired SukiSU version
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash ${{ env.SUKI_BRANCH_ARG }} || { echo "SukiSU setup failed"; exit 1; }
          cd ./KernelSU # Assuming setup creates this directory
          echo "Calculating KSU Version..."
          # Use git rev-list on the correct branch (e.g., main or the tag checked out)
          KSU_COMMIT_COUNT=$(git rev-list --count HEAD)
          # The base number (10606) might need adjustment depending on SukiSU's baseline
          KSU_VERSION=$(expr $KSU_COMMIT_COUNT + 10606)
          echo "Calculated KSU Version: $KSU_VERSION"
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          echo "Patching DKSU_VERSION in KernelSU Makefile..."
          # Make sure the path and the placeholder (DKSU_VERSION=12500) are correct
          sed -i "s/DKSU_VERSION=12500/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile || { echo "Failed to patch DKSU_VERSION"; exit 1; }
          cd ../.. # Go back to kernel_workspace

      - name: Apply SUSFS Patches for SukiSU
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && inputs.SUSFS_ENABLED == true }}
        run: |
          cd kernel_workspace
          echo "Cloning SUSFS and SukiSU patches..."
          # Use the specific branch matching kernel/android version
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }} --depth=1 || { echo "Failed to clone susfs4ksu"; exit 1; }
          # Special handling for 6.1 might still be needed if using that version
          if [[ "${{ inputs.KERNEL_VERSION }}" == "6.1" ]]; then
            echo "Applying specific reset for Kernel 6.1 SUSFS branch..."
            cd susfs4ksu
            git reset --hard HEAD~1 || echo "WARN: git reset for 6.1 failed, continuing..."
            cd ..
          fi
          git clone https://github.com/ShirkNeko/SukiSU_patch.git --depth=1 || { echo "Failed to clone SukiSU_patch"; exit 1; }

          cd kernel_platform
          echo "Copying SUSFS patch files..."
          SUSFS_PATCH_NAME="50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch"
          cp ../susfs4ksu/kernel_patches/$SUSFS_PATCH_NAME ./common/ || { echo "Failed to copy SUSFS patch"; exit 1; }
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || { echo "Failed to copy SUSFS fs files"; exit 1; }
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || { echo "Failed to copy SUSFS include files"; exit 1; }

          echo "Applying SUSFS patch to common kernel..."
          cd ./common
          # Using || true still, but be aware it might hide critical errors
          patch -p1 < $SUSFS_PATCH_NAME || echo "WARN: Applying SUSFS patch ($SUSFS_PATCH_NAME) failed or partially applied."
          echo "SUSFS patch applied (or attempted)."
          cd ../.. # Go back to kernel_workspace

      - name: Apply Hide Stuff Patches
        # This depends on SukiSU_patch repo structure
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && inputs.SUSFS_ENABLED == true }} # Assumes Hide Stuff needs SUSFS
        run: |
          cd kernel_workspace/kernel_platform/common
          echo "Copying and applying Hide Stuff patch..."
          cp ../../SukiSU_patch/69_hide_stuff.patch ./ || { echo "Failed to copy Hide Stuff patch"; exit 1; }
          # Using -F 3 and || true, be cautious
          patch -p1 -F 3 < 69_hide_stuff.patch || echo "WARN: Applying Hide Stuff patch failed or partially applied."
          echo "Hide Stuff patch applied (or attempted)."
          cd ../.. # Go back to kernel_workspace

      - name: Apply New Hooks Patches (VFS)
        # This depends on SukiSU_patch repo structure
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && inputs.VFS_patch_ENABLED == 'enable' }}
        run: |
          cd kernel_workspace/kernel_platform/common
          echo "Copying and applying New Hooks (VFS) patch..."
          # Ensure the patch path is correct in SukiSU_patch repo
          cp ../../SukiSU_patch/hooks/new_hooks.patch ./ || { echo "Failed to copy New Hooks patch"; exit 1; }
          # Using -F 3 and || true, be cautious
          patch -p1 -F 3 < new_hooks.patch || echo "WARN: Applying New Hooks patch failed or partially applied."
          echo "New Hooks patch applied (or attempted)."
          cd ../.. # Go back to kernel_workspace
          # Commented out lz4k patch as in original, uncomment if needed for specific non-5.10 kernels
          # if [ "${{ inputs.KERNEL_VERSION }}" != "5.10" ]; then
          #   cd kernel_workspace/kernel_platform/common
          #   cp ../../SukiSU_patch/other/lz4k_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch ./
          #   patch -p1 -F 3 < lz4kd.patch || true
          #   cd ../..
          # fi

      - name: Add Kernel Configuration Settings
        # Add KSU/SUSFS settings to defconfig
        if: ${{ inputs.kernelsu_variant == 'SukiSU' }} # Only if SukiSU is chosen
        run: |
          cd kernel_workspace/kernel_platform
          DEFCONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"
          echo "Adding KSU/SUSFS configuration to $DEFCONFIG_PATH"

          # Base KSU config
          echo "CONFIG_KSU=y" >> $DEFCONFIG_PATH
          echo "CONFIG_KPM=y" >> $DEFCONFIG_PATH # Assuming KPM is desired with SukiSU

          # VFS Hook related config (conditional)
          if [[ "${{ inputs.VFS_patch_ENABLED }}" == 'enable' ]]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> $DEFCONFIG_PATH # Assumes new_hooks requires MANUAL_HOOK
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_MANUAL_HOOK=n" >> $DEFCONFIG_PATH # Explicitly disable if VFS patch not enabled
          fi

          # SUSFS specific config (conditional on SUSFS_ENABLED)
          if [[ "${{ inputs.SUSFS_ENABLED }}" == "true" ]]; then
            echo "CONFIG_KSU_SUSFS=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> $DEFCONFIG_PATH
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> $DEFCONFIG_PATH
          else
             echo "CONFIG_KSU_SUSFS=n" >> $DEFCONFIG_PATH # Explicitly disable if SUSFS not enabled
          fi

          # Remove check_defconfig from build config
          # Ensure the path and command are correct for your kernel source structure
          BUILD_CONFIG_GKI="./common/build.config.gki"
          if grep -q "check_defconfig" $BUILD_CONFIG_GKI; then
             echo "Removing check_defconfig from $BUILD_CONFIG_GKI"
             # Use a more specific sed command if possible, e.g., targeting the line number if stable
             sed -i 's/check_defconfig//' $BUILD_CONFIG_GKI
          else
             echo "check_defconfig not found in $BUILD_CONFIG_GKI"
          fi
          cd ../.. # Go back to kernel_workspace

      - name: Set Custom Kernel Version String
        run: |
         cd kernel_workspace/kernel_platform
         echo "Setting custom kernel version string to: ${{ inputs.KERNEL_NAME }}"
         # Specific fix for sm8650/sm8750 Bazel build if needed
         if [[ "${{ inputs.CPU }}" == "sm8650" || "${{ inputs.CPU }}" == "sm8750" ]]; then
           echo "Applying Bazel specific version string fix for ${{ inputs.CPU }}"
           sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "WARN: sed failed on stamp.bzl"
         fi
         # Modify setlocalversion to output the custom name
         # Ensure this modification doesn't break the script logic
         sed -i '$s|echo "\$res"|echo "\${{ inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion || { echo "Failed to modify setlocalversion"; exit 1; }
         cd ../.. # Go back to kernel_workspace

      - name: Build kernel
        run: |
          cd kernel_workspace
          echo "Starting kernel build for ${{ inputs.CPUD }}..."
          BUILD_START_TIME=$(date +%s)
          if [[ "${{ inputs.CPU }}" == "sm8650" || "${{ inputs.CPU }}" == "sm8750" ]]; then
            echo "Using Bazel build..."
            # Pass KSU_VERSION if needed by Bazel build environment
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.CPUD }} gki --action_env=KSU_VERSION=${{ env.KSUVER }} || { echo "Bazel build failed"; exit 1; }
          else
            echo "Using oplus_build_kernel.sh with LTO=thin..."
            # Ensure KSU_VERSION is exported if the script needs it
            export KSU_VERSION=${{ env.KSUVER }}
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.CPUD }} gki || { echo "oplus_build_kernel.sh failed"; exit 1; }
          fi
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "Kernel build finished in $BUILD_DURATION seconds."
          cd .. # Go back to workspace root

      - name: Prepare AnyKernel3 package
        run: |
          echo "Cloning AnyKernel3 repository..."
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1 AnyKernel3 || { echo "Failed to clone AnyKernel3"; exit 1; }
          rm -rf ./AnyKernel3/.git

          echo "Locating compiled kernel Image..."
          # Define potential output directories based on build type and structure
          declare -a possible_dirs=(
              "./kernel_workspace/kernel_platform/out/msm-kernel-${{ inputs.CPUD }}-gki/dist/" # Bazel output?
              "./kernel_workspace/kernel_platform/out/msm-${{ inputs.CPUD }}-${{ inputs.CPUD }}-gki/dist/" # oplus_build_kernel output?
              "./kernel_workspace/kernel_platform/common/out/arch/arm64/boot/" # Common output?
              "./kernel_workspace/kernel_platform/out/android-msm-pixel-common/dist/" # Another common pattern
          )
          IMAGE_PATH=""
          for dir in "${possible_dirs[@]}"; do
              if [[ -f "${dir}Image" ]]; then
                  IMAGE_PATH="${dir}Image"
                  echo "Found Image at: $IMAGE_PATH"
                  break
              fi
          done

          # Fallback search if not found in common locations
          if [[ -z "$IMAGE_PATH" ]]; then
              echo "Image not found in common locations, searching deeper..."
              IMAGE_PATH=$(find ./kernel_workspace/kernel_platform/out/ -name Image -type f | head -n 1)
              if [[ -n "$IMAGE_PATH" ]]; then
                  echo "Found Image via find at: $IMAGE_PATH"
              fi
          fi

          if [[ -z "$IMAGE_PATH" || ! -f "$IMAGE_PATH" ]]; then
              echo "Kernel Image file not found after build!"
              echo "Listing potential output directories:"
              find ./kernel_workspace/kernel_platform/out/ -type d -name "dist"
              find ./kernel_workspace/kernel_platform/out/ -type f -name "Image"
              exit 1
          fi

          echo "Copying Image to AnyKernel3..."
          cp "$IMAGE_PATH" ./AnyKernel3/Image || { echo "Failed to copy Image to AnyKernel3"; exit 1; }

          # Also prepare Image for direct upload if needed
          mkdir -p kernel_image_output
          cp "$IMAGE_PATH" kernel_image_output/Image || { echo "Failed to copy Image for artifact upload"; exit 1; }

      # REMOVED: The problematic 'Apply patch_linux and replace Image' step is removed.
      # We now directly use the Image generated by the build process.

      - name: Upload AnyKernel3 Zip Artifact
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_SukiSU_${{ env.KSUVER }}_${{ inputs.FEIL }}_${{ inputs.KERNEL_NAME }}
         path: ./AnyKernel3/* # Upload content directly for zipping by action
         if-no-files-found: error # Fail if AnyKernel3 dir is empty

      - name: Upload Kernel Image Artifact
        uses: actions/upload-artifact@v4
        with:
         name: Image_SukiSU_${{ env.KSUVER }}_${{ inputs.FEIL }}_${{ inputs.KERNEL_NAME }}
         path: kernel_image_output/Image # Upload the raw Image file
         if-no-files-found: error # Fail if Image wasn't copied
