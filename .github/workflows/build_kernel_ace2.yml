name: Build OnePlus Kernel with KernelSU/SukiSU
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "SoC分支 (如sm8475/sm8650)"
        required: true
        default: 'sm8475'
      FEIL:
        description: "设备配置文件 (如oneplus_ace2_v)"
        required: true
        default: 'oneplus_ace2_v'
      CPUD:
        description: "处理器代号 (如waipio/pineapple)"
        required: true
        default: 'waipio'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android12'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '5.10'
      KERNEL_NAME:
        description: "自定义内核名称后缀"
        required: true
        default: '-android12-9-o-brmdm'
      kernelsu_variant:
        description: "选择KernelSU类型"
        required: true
        type: choice
        options:
          - Kernel
          - SukiSU
        default: SukiSU
      kernelsu_version:
        description: "选择KernelSU版本"
        required: true
        type: choice
        options:
          - without ksu
          - tag
          - main
        default: main
      SUSFS_ENABLED:
        description: "启用SUSFS功能"
        required: true
        type: boolean
        default: true
      VFS_patch_ENABLED:
        description: "启用VFS补丁(新钩子)"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KERNEL_DIR: kernel_workspace/kernel_platform
    steps:
      # 初始化环境
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl bc bison flex libssl-dev make gcc
      
      - name: Install repo tool
        run: |
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
      
      # 同步代码
      - name: Initialize repo and sync
        run: |
          mkdir -p kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b refs/heads/oneplus/${{ github.event.inputs.CPU }} \
            -m ${{ github.event.inputs.FEIL }}.xml \
            --depth=1
          repo sync -j$(nproc) -c --no-tags --no-clone-bundle
          
          # 清理保护符号
          find $KERNEL_DIR -name "abi_gki_protected_exports_*" -delete || true
      
      # 移除-dirty标记
      - name: Force remove -dirty suffix
        run: |
          cd $KERNEL_DIR
          find . -name "setlocalversion" -exec sed -i 's/ -dirty//g' {} \;
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix" --no-verify || true
      
      # KernelSU/SukiSU 相关设置
      - name: Setup KernelSU/SukiSU
        if: ${{ github.event.inputs.kernelsu_variant != 'without ksu' }}
        run: |
          cd $KERNEL_DIR
          
          # 设置分支
          if [[ "${{ github.event.inputs.kernelsu_version }}" == "tag" ]]; then
            BRANCH=""
          else
            BRANCH="-s susfs-stable"
          fi
          
          # 安装KernelSU/SukiSU
          if [[ "${{ github.event.inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh" | bash $BRANCH
            cd ./KernelSU
            KSU_VERSION=$(expr $(git rev-list --count HEAD) "+" 12505)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          fi
      
      # SUSFS补丁
      - name: Apply SUSFS Patches
        if: ${{ github.event.inputs.SUSFS_ENABLED && github.event.inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          cd kernel_workspace
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone --depth=1 https://github.com/ShirkNeko/SukiSU_patch.git
          
          cd $KERNEL_DIR
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp -r ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cd ./common
          echo "Applying SUSFS patch..."
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
      
      # 隐藏补丁
      - name: Apply Hide Stuff Patches
        if: ${{ github.event.inputs.SUSFS_ENABLED }}
        run: |
          cd $KERNEL_DIR/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch || true
      
      # VFS补丁
      - name: Apply New Hooks Patches
        if: ${{ github.event.inputs.VFS_patch_ENABLED == 'enable' }}
        run: |
          cd $KERNEL_DIR/common
          cp ../../SukiSU_patch/hooks/new_hooks.patch ./
          patch -p1 -F 3 < new_hooks.patch || true
      
      # 内核配置
      - name: Configure Kernel
        run: |
          cd $KERNEL_DIR
          
          # 基础KernelSU配置
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # VFS配置
          if [[ "${{ github.event.inputs.VFS_patch_ENABLED }}" == 'enable' ]]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          # SUSFS配置
          cat <<EOF >> ./common/arch/arm64/configs/gki_defconfig
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          EOF
          
          # 移除defconfig检查
          sed -i 's/check_defconfig//' ./common/build.config.gki
      
      # 设置内核名称
      - name: Customize Kernel Name
        run: |
          cd $KERNEL_DIR
          sed -i '$s|echo "\$res"|echo "${{ github.event.inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion
          
          # 仅sm8650需要修改stamp.bzl
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" ]]; then
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          fi
      
      # 清理旧构建
      - name: Clean Previous Build
        if: ${{ github.event.inputs.CPU != 'sm8650' }}
        run: |
          cd $KERNEL_DIR
          rm -rf out/ .out/ || true
      
      # 构建内核
      - name: Build Kernel
        run: |
          cd kernel_workspace
          
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" ]]; then
            ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} gki
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} gki
          fi
      
      # 打包AnyKernel3
      - name: Package Kernel
        run: |
          # 确定镜像路径
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" ]]; then
            IMAGE_PATH="kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/Image"
          else
            IMAGE_PATH="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/Image"
          fi
          
          # 检查镜像是否存在
          if [ ! -f "$IMAGE_PATH" ]; then
            echo "::error::Kernel image not found at $IMAGE_PATH"
            exit 1
          fi
          
          # 准备AnyKernel3
          git clone --depth=1 https://github.com/Kernel-SU/AnyKernel3
          rm -rf ./AnyKernel3/.git
          cp "$IMAGE_PATH" ./AnyKernel3/
          cp "$IMAGE_PATH" ./kernel_workspace/kernel
      
      # 上传制品
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_${{ github.event.inputs.FEIL }}_${{ env.KSUVER || 'NOKSU' }}
          path: |
            ./AnyKernel3/*
            ./kernel_workspace/kernel
